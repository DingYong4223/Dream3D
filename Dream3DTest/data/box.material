namespace boxMaterial
{	
	material texturedUnlit
	{
		technique
		{
			pass
			{
				vertexShader = "data/shaders/textured.vert"
				fragmentShader = "data/shaders/textured.frag"

				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				
				sampler u_diffuseTexture
				{
					mipmap = true
					wrapS = CLAMP
					wrapT = CLAMP
					minFilter = LINEAR_MIPMAP_LINEAR
					magFilter = LINEAR
				}

				renderState
				{
					cullFace = true
					depthTest = true
				}
			}
		}
	}

	material texturedSpecular
	{
		technique
		{
			pass
			{
				vertexShader = "data/shaders/textured.vert"
				fragmentShader = "data/shaders/textured.frag"
				defines = "SPECULAR;DIRECTIONAL_LIGHT_COUNT 1"

				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
				u_worldViewMatrix = WORLD_VIEW_MATRIX
				u_cameraPosition = CAMERA_VIEW_POSITION
				u_ambientColor = SCENE_AMBIENT_COLOR
				u_specularExponent = 50

				sampler u_diffuseTexture
				{
					mipmap = true
					wrapS = CLAMP
					wrapT = CLAMP
					minFilter = LINEAR_MIPMAP_LINEAR
					magFilter = LINEAR
				}

				renderState
				{
					cullFace = true
					depthTest = true
				}
			}
		}
	}

	material texturedTransparent
	{
		technique
		{
			pass
			{
				vertexShader = "data/shaders/textured.vert"
				fragmentShader = "data/shaders/textured.frag"
				defines = "DIRECTIONAL_LIGHT_COUNT 1"

				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
				
				sampler u_diffuseTexture
				{
					mipmap = true
					wrapS = CLAMP
					wrapT = CLAMP
					minFilter = LINEAR_MIPMAP_LINEAR
					magFilter = LINEAR
				}

				renderState
				{
					cullFace = true
					depthTest = true
					blend = true
					blendSrc = SRC_ALPHA
					blendDst = ONE_MINUS_SRC_ALPHA
				}
			}
		}
	}

	material colored
	{
		technique
		{
			pass
			{
				vertexShader = "data/shaders/colored.vert"
				fragmentShader = "data/shaders/colored.frag"
				defines = "DIRECTIONAL_LIGHT_COUNT 1"

				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
				
				renderState
				{
					cullFace = true
					depthTest = true
				}
			}
		}
	}

	material boy : texturedTransparent
	{
		technique
		{
			pass
			{
				defines = "SKINNING;SKINNING_JOINT_COUNT 31;MODULATE_ALPHA;DIRECTIONAL_LIGHT_COUNT 1"
				u_matrixPalette = MATRIX_PALETTE
				u_modulateAlpha = 1.0

				sampler u_diffuseTexture
				{
					path = "@character"
				}
			}
		}
	}

	material boyshadow : texturedTransparent
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@shadow"
				}
			}
		}
	}

	material floortiles : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@floortiles"
				}
			}
		}
	}

	material floor : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@floor"
				}
			}
		}
	}

	material wallwest : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@wallwest"
				}
			}
		}
	}

	material walleast : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@walleast"
				}
			}
		}
	}

	material wallnorth : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@wallnorth"
				}
			}
		}
	}

	material wallsouth : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@wallsouth"
				}
			}
		}
	}

	material walloverhang : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@walloverhang"
				}
			}
		}
	}

	material toybox : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@toybox"
				}
			}
		}
	}

	material green : colored
	{
		technique
		{
			pass
			{
				u_diffuseColor = "0.65, 0.7, 0, 1"
			}
		}
	}

	material lightblue : colored
	{
		technique
		{
			pass
			{
				u_diffuseColor = "0.38, 0.72, 0.85, 1"
			}
		}
	}

	material basketball : texturedSpecular
	{
		technique
		{
			pass
			{
				u_specularExponent = 12

				sampler u_diffuseTexture
				{
					path = "@basketball"
					wrapS = REPEAT
					wrapT = REPEAT
				}
			}
		}
	}

	material playtable : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@playtable"
				}
			}
		}
	}

	material easel : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@easel"
				}
			}
		}
	}

	material door : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@door"
				}
			}
		}
	}

	material basketballnet : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@basketballnet"
				}
			}
		}
	}

	material backboard : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@backboard"
				}
			}
		}
	}

	material doorframe : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@doorframe"
				}
			}
		}
	}

	material windowledge : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@windowledge"
				}
			}
		}
	}

	material bookshelf : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@bookshelf"
				}
			}
		}
	}

	material book : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@book"
				}
			}
		}
	}

	material tabletop : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@tabletop"
				}
			}
		}
	}

	material tableleg1 : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@tableleg1"
				}
			}
		}
	}

	material tableleg2 : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@tableleg2"
				}
			}
		}
	}

	material tableleg3 : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@tableleg3"
				}
			}
		}
	}

	material tableleg4 : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@tableleg4"
				}
			}
		}
	}

	material storageorganizer : texturedUnlit
	{
		technique
		{
			pass
			{
				sampler u_diffuseTexture
				{
					path = "@storageorganizer"
				}
			}
		}
	}
	
	material magni
	{
		technique
		{
			pass 0
			{
				// shaders
				vertexShader = "data/shaders/Magni/magni.vert"
				fragmentShader = "data/shaders/Magni/magni.frag"
				
				// uniforms
				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				
				// samplers
				sampler u_sampler0
				{
					path = "data/shaders/Magni/Magni_1.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler1
				{
					path = "data/shaders/Magni/Magni_2.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler2
				{
					path = "data/shaders/Magni/Magni_3.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler3
				{
					path = "data/shaders/Magni/Magni_4.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler4
				{
					path = "data/shaders/Magni/Magni_5.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler5
				{
					path = "data/shaders/Magni/Magni_6.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				
				// render state
				renderState
				{
					cullFace = false
					depthTest = true
				}
			}
		}
	}
	
	material medivh
	{
		technique
		{
			pass 0
			{
				// shaders
				vertexShader = "data/shaders/Medivh/medivh.vert"
				fragmentShader = "data/shaders/Medivh/medivh.frag"
				
				// uniforms
				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				
				// samplers
				sampler u_sampler0
				{
					path = "data/shaders/Medivh/Medivh_1.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler1
				{
					path = "data/shaders/Medivh/Medivh_2.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler2
				{
					path = "data/shaders/Medivh/Medivh_3.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler3
				{
					path = "data/shaders/Medivh/Medivh_4.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler4
				{
					path = "data/shaders/Medivh/Medivh_5.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler5
				{
					path = "data/shaders/Medivh/Medivh_6.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				
				// render state
				renderState
				{
					cullFace = false
					depthTest = true
				}
			}
		}
	}
	
	material testShader
	{
		technique
		{
			pass 0
			{
				// shaders
				vertexShader = "data/shaders/TestShader/testShader.vert"
				fragmentShader = "data/shaders/TestShader/testShader.frag"
				
				// uniforms
				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				
				// samplers
				sampler u_sampler0
				{
					path = "data/shaders/TestShader/Lightning_Middle.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler1
				{
					path = "data/shaders/TestShader/Magni_2.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler2
				{
					path = "data/shaders/TestShader/Magni_3.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler3
				{
					path = "data/shaders/TestShader/Magni_4.tga"
					mipmap = true
					wrapS = CLAMP
					wrapT = CLAMP
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler4
				{
					path = "data/shaders/TestShader/NewBack_03.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler5
				{
					path = "data/shaders/TestShader/NewBack_04.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler6
				{
					path = "data/shaders/TestShader/Shockwave_Watercolor.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler7
				{
					path = "data/shaders/TestShader/vortex_flare1.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_sampler8
				{
					path = "data/shaders/TestShader/vortex_flare2.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				
				// render state
				renderState
				{
					cullFace = false
					depthTest = true
				}
			}
		}
	}

	material box
	{
		technique boxTechnique
		{
			pass 0
			{
				// shaders
				vertexShader = "data/shaders/textured.vert"
				fragmentShader = "data/shaders/textured.frag"
				defines = "SPECULAR; POINT_LIGHT_COUNT 1"
				
				// uniforms
				u_worldMatrix = WORLD_MATRIX
				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				u_inverseTransposeWorldMatrix = INVERSE_TRANSPOSE_WORLD_MATRIX
				u_cameraPosition = CAMERA_WORLD_POSITION
								
				u_ambientColor = "0.2, 0.2, 0.2"
				u_specularExponent = 4
				
				// samplers
				sampler u_diffuseTexture
				{
					path = "data/ColorFul_2048x1300.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}

				sampler u_normalmapTexture
				{
					path = "data/cartoon.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = NEAREST_MIPMAP_LINEAR
					magFilter = LINEAR
				}

				// render state
				renderState
				{
					cullFace = false
					depthTest = true
				}
			}
		}
	}
	
	material box1
	{
		technique
		{
			pass 0
			{
				// shaders
				vertexShader = "data/shaders/textured.vert"
				fragmentShader = "data/shaders/textured.frag"
				defines = "SPECULAR;DIRECTIONAL_LIGHT_COUNT 1"
				
				// uniforms
				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				u_inverseTransposeWorldViewMatrix = INVERSE_TRANSPOSE_WORLD_VIEW_MATRIX
				u_cameraPosition = CAMERA_WORLD_POSITION
				u_ambientColor = "0.2, 0.2, 0.2"
				u_lightColor = "0.75, 0.75, 0.75"
				u_specularExponent = 50
				
				// samplers
				sampler u_diffuseTexture
				{
					path = "data/ColorFul_2048x1300.tga"
					mipmap = true
					wrapS = CLAMP
					wrapT = CLAMP
					minFilter = NEAREST_MIPMAP_LINEAR
					magFilter = LINEAR
				}

				// render state
				renderState
				{
					cullFace = true
					depthTest = true
				}
			}
			
			//pass 1
			//{
			//	// shaders
			//	vertexShader = "data/shaders/textured.vert"
			//	fragmentShader = "data/shaders/textured.frag"
			//
			//	// uniforms
			//	u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
            //
			//	// samplers
			//	sampler u_diffuseTexture
			//	{
			//		path = "data/bone.tga"
			//		mipmap = true
			//		wrapS = CLAMP
			//		wrapT = CLAMP
			//		minFilter = NEAREST_MIPMAP_LINEAR
			//		magFilter = LINEAR
			//	}		
            //
			//	// render state
			//	renderState
			//	{
			//		cullFace = true
			//		depthTest = true
			//	}			
			//}
		}
	}
	
	material testBumpMap
	{
		technique
		{
			pass 0
			{
				// shaders
				vertexShader = "data/shaders/textured.vert"
				fragmentShader = "data/shaders/textured.frag"
				defines = "SPECULAR; POINT_LIGHT_COUNT 1; BUMPED"
				
				// uniforms
				u_worldMatrix = WORLD_MATRIX
				u_worldViewProjectionMatrix = WORLD_VIEW_PROJECTION_MATRIX
				u_inverseTransposeWorldMatrix = INVERSE_TRANSPOSE_WORLD_MATRIX
				u_cameraPosition = CAMERA_WORLD_POSITION
				u_ambientColor = "1.0, 1.0, 1.0"
				u_specularExponent = 4

				// samplers
				sampler u_diffuseTexture
				{
					path = "data/MD5Models/doom3/hellknight/a_hk_branded_02b.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				sampler u_normalmapTexture
				{
					path = "data/MD5Models/doom3/hellknight/hellknight_normals.tga"
					mipmap = true
					wrapS = REPEAT
					wrapT = REPEAT
					minFilter = LINEAR
					magFilter = LINEAR
				}
				
				// render state
				renderState
				{
					cullFace = false
					depthTest = true
				}
			}
		}
	}
}